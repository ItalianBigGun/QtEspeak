一. espeak库API
***************
1. 初始化函数
===================================================================================
    ESPEAK_API int espeak_Initialize(espeak_AUDIO_OUTPUT output, int buflength, const char *path, int options);
翻：
    必须在调用任何合成函数之前调用。
    output: 音频数据可以由eSpeak播放，也可以由SynthCallback函数传递回来。

    buflength:  传递给SynthCallback函数的声音缓冲区的长度(mS)。
            Value=0 设置默认值200mS.
            此参数仅用于AUDIO_OUTPUT_RETRIEVAL和AUDIO_OUTPUT_SYNCHRONOUS模式。

    path: 包含speak-data目录的目录，默认位置为NULL。

    options: bit 0:  1=allow espeakEVENT_PHONEME事件。
            bit 1:  1=espeakEVENT_PHONEME 事件给出IPA音素名，而不是eSpeak音素名
            bit 15: 1=don't exit 如果没有找到espeak_data (used for --help)

    Returns: 采样速率(Hz), or -1 (EE_INTERNAL_ERROR).

原：
    Must be called before any synthesis functions are called.
    output: the audio data can either be played by eSpeak or passed back by the SynthCallback function.

    buflength:  The length in mS of sound buffers passed to the SynthCallback function.
            Value=0 gives a default of 200mS.
            This paramater is only used for AUDIO_OUTPUT_RETRIEVAL and AUDIO_OUTPUT_SYNCHRONOUS modes.

    path: The directory which contains the espeak-data directory, or NULL for the default location.

    options: bit 0:  1=allow espeakEVENT_PHONEME events.
            bit 1:  1= espeakEVENT_PHONEME events give IPA phoneme names, not eSpeak phoneme names
            bit 15: 1=don't exit if espeak_data is not found (used for --help)

    Returns: sample rate in Hz, or -1 (EE_INTERNAL_ERROR).

2. 设置同步回调函数
===================================================================================
    ESPEAK_API void espeak_SetSynthCallback(t_espeak_callback* SynthCallback);
翻：
    必须在调用任何合成函数之前调用。
    这指定了调用程序中的一个函数，当缓冲区
    语音数据已经产生。

    回调函数的形式如下:

    int SynthCallback(short *wav, int numsamples, espeak_EVENT *events);

    wav:  代表已产生的语音声音数据。
      NULL 表示合成已经完成。

    numsamples: 代表wav中的条目数。这个数字可以变化，可以小于
        espeak_Initialize中给出的buflength参数所隐含的值，并且可以
        有时为零(这并不表示合成的结束)。   

    events: 一个espeak_EVENT项数组，它指示单词和句子事件，以及
        在文本中出现if <mark>和<audio>元素。的列表
        事件被类型为0的事件终止。


    Callback returns: 0=继续合成,  1=中止合成.

原：
    Must be called before any synthesis functions are called.
    This specifies a function in the calling program which is called when a buffer of
    speech sound data has been produced.


    The callback function is of the form:

    int SynthCallback(short *wav, int numsamples, espeak_EVENT *events);

    wav:  is the speech sound data which has been produced.
      NULL indicates that the synthesis has been completed.

    numsamples: is the number of entries in wav.  This number may vary, may be less than
      the value implied by the buflength parameter given in espeak_Initialize, and may
      sometimes be zero (which does NOT indicate end of synthesis).

    events: an array of espeak_EVENT items which indicate word and sentence events, and
      also the occurance if <mark> and <audio> elements within the text.  The list of
      events is terminated by an event of type = 0.


    Callback returns: 0=continue synthesis,  1=abort synthesis.

3. 设置同步回调函数
===================================================================================
ESPEAK_API void espeak_SetUriCallback(int (*UriCallback)(int, const char*, const char*));

翻：
    此函数可以在使用合成函数之前调用，以便处理
    <音频>标签。它指定了一个回调函数，当<audio>元素为
    遇到并允许调用程序指示声音文件是否
    在<audio>元素中指定。

    回调函数的形式是:

    int UriCallback(int type, const char *uri, const char *base);

    type:  回调事件的类型。目前只有1= <audio>元素

    uri:   <audio>元素中的"src"属性

    base:  <speak>元素的"xml:base"属性(如果有的话)

    Return: 1=不要播放声音，除非要说的文本被替代。
           0=在事件列表中<audio>元素处放置一个PLAY事件
              发生。然后调用程序可以在此时播放声音。

原：
    This function may be called before synthesis functions are used, in order to deal with
    <audio> tags.  It specifies a callback function which is called when an <audio> element is
    encountered and allows the calling program to indicate whether the sound file which
    is specified in the <audio> element is available and is to be played.

    The callback function is of the form:

    int UriCallback(int type, const char *uri, const char *base);

    type:  type of callback event.  Currently only 1= <audio> element

    uri:   the "src" attribute from the <audio> element

    base:  the "xml:base" attribute (if any) from the <speak> element

    Return: 1=don't play the sound, but speak the text alternative.
           0=place a PLAY event in the event list at the point where the <audio> element
             occurs.  The calling program can then play the sound at that point.

4. 合成语音函数
===================================================================================
ESPEAK_API espeak_ERROR espeak_Synth(const void *text,
	size_t size,
	unsigned int position,
	espeak_POSITION_TYPE position_type,
	unsigned int end_position,
	unsigned int flags,
	unsigned int* unique_identifier,
	void* user_data);
翻：
    为指定的文本合成语音。语音声音数据被传递给呼叫方
    通过espeak_SetSynthCallback()指定的回调函数在缓冲区中执行程序。
    该命令是异步的:它在内部被缓冲并尽快返回。
    如果之前使用AUDIO_OUTPUT_PLAYBACK作为参数调用了espeak_Initialize，声音数据将由eSpeak播放。

    text: 以零字符结束的要讲的文本。它可以是8位字符，
        宽字符(wchar_t)或UTF8编码。这些是由"旗帜"决定的
        参数。

    size: 等于(或大于)文本数据的大小，以字节为单位。这是按顺序使用的
        为文本分配内部存储空间。此值不用于
        AUDIO_OUTPUT_SYNCHRONOUS模式。

    position:  课文中开始说话的位置。零表示从
        正文的开头。

    position_type:  确定“position”是否为字符、单词或句子的数量。
      Values:

    end_position:  如果设置了，这将给出一个字符位置，在此位置将停止说话。一个值
            0表示没有结束位置。

    flags:  These may be OR'd together:
      Type of character codes, one of:
         espeakCHARS_UTF8     UTF8 encoding
         espeakCHARS_8BIT     The 8 bit ISO-8859 character set for the particular language.
         espeakCHARS_AUTO     8 bit or UTF8  (this is the default)
         espeakCHARS_WCHAR    Wide characters (wchar_t)
         espeakCHARS_16BIT    16 bit characters.

      espeakSSML   Elements within < > are treated as SSML elements, or if not recognised are ignored.

      espeakPHONEMES  Text within [[ ]] is treated as phonemes codes (in espeak's Hirshenbaum encoding).

      espeakENDPAUSE  If set then a sentence pause is added at the end of the text.  If not set then
         this pause is suppressed.

    unique_identifier: 它必须是NULL，或者指向一个整型变量
        eSpeak编写消息标识符号。
        eSpeak在espeak_EVENT消息中包含这个数字，这些消息是结果
        espeak_Synth()的调用。

    user_data: 一个指针(或NULL)，它将被传递给回调函数
            espeak_EVENT消息。     

    Return: 
        EE_OK: 操作实现
        EE_BUFFER_FULL: 命令不能被缓冲;
                您可以稍后再尝试调用该函数。
	   EE_INTERNAL_ERROR.

原：
    Synthesize speech for the specified text.  The speech sound data is passed to the calling
    program in buffers by means of the callback function specified by espeak_SetSynthCallback(). 
    The command is asynchronous: it is internally buffered and returns as soon as possible. 
    If espeak_Initialize was previously called with AUDIO_OUTPUT_PLAYBACK as argument, the sound data are played by eSpeak.

    text: The text to be spoken, terminated by a zero character. It may be either 8-bit characters,
      wide characters (wchar_t), or UTF8 encoding.  Which of these is determined by the "flags"
      parameter.

    size: Equal to (or greatrer than) the size of the text data, in bytes.  This is used in order
      to allocate internal storage space for the text.  This value is not used for
      AUDIO_OUTPUT_SYNCHRONOUS mode.

    position:  The position in the text where speaking starts. Zero indicates speak from the
      start of the text.

    position_type:  Determines whether "position" is a number of characters, words, or sentences.
      Values:

    end_position:  If set, this gives a character position at which speaking will stop.  A value
      of zero indicates no end position.

    flags:  These may be OR'd together:
      Type of character codes, one of:
         espeakCHARS_UTF8     UTF8 encoding
         espeakCHARS_8BIT     The 8 bit ISO-8859 character set for the particular language.
         espeakCHARS_AUTO     8 bit or UTF8  (this is the default)
         espeakCHARS_WCHAR    Wide characters (wchar_t)
         espeakCHARS_16BIT    16 bit characters.

      espeakSSML   Elements within < > are treated as SSML elements, or if not recognised are ignored.

      espeakPHONEMES  Text within [[ ]] is treated as phonemes codes (in espeak's Hirshenbaum encoding).

      espeakENDPAUSE  If set then a sentence pause is added at the end of the text.  If not set then
         this pause is suppressed.

    unique_identifier: This must be either NULL, or point to an integer variable to
       which eSpeak writes a message identifier number.
       eSpeak includes this number in espeak_EVENT messages which are the result of
       this call of espeak_Synth().

    user_data: a pointer (or NULL) which will be passed to the callback function in
       espeak_EVENT messages.

    Return: EE_OK: operation achieved
           EE_BUFFER_FULL: the command can not be buffered;
             you may try after a while to call the function again.
	   EE_INTERNAL_ERROR.

5. 设置同步回调函数
===================================================================================
ESPEAK_API espeak_ERROR espeak_Synth_Mark(const void *text,
	size_t size,
	const char *index_mark,
	unsigned int end_position,
	unsigned int flags,
	unsigned int* unique_identifier,
	void* user_data);
翻：
    为指定的文本合成语音。类似于espeak_Synth()，但起始位置是
    由文本中<mark>元素的名称指定。

    index_mark:  在文本中，<mark>元素的"name"属性指定
        合成开始的点。UTF8字符串。

    其他参数, 请查看 espeak_Synth()

    Return: EE_OK:  操作实现
           EE_BUFFER_FULL: 命令不能被缓冲;
                您可以稍后再尝试调用该函数。
	   EE_INTERNAL_ERROR.

原：
    Synthesize speech for the specified text.  Similar to espeak_Synth() but the start position is
    specified by the name of a <mark> element in the text.

    index_mark:  The "name" attribute of a <mark> element within the text which specified the
      point at which synthesis starts.  UTF8 string.

    For the other parameters, see espeak_Synth()

    Return: EE_OK: operation achieved
           EE_BUFFER_FULL: the command can not be buffered;
             you may try after a while to call the function again.
	   EE_INTERNAL_ERROR.

6. 设置同步回调函数
===================================================================================
ESPEAK_API espeak_ERROR espeak_Key(const char *key_name);
翻：
    说出一个键盘键的名称。
    如果key_name是单个字符，则表示该字符的名称。
    否则，它将key_name作为文本字符串。

    Return: EE_OK:  操作实现
           EE_BUFFER_FULL: 命令不能被缓冲;
                您可以稍后再尝试调用该函数。
	   EE_INTERNAL_ERROR.

原：
    Speak the name of a keyboard key.
    If key_name is a single character, it speaks the name of the character.
    Otherwise, it speaks key_name as a text string.

    Return: EE_OK: operation achieved
           EE_BUFFER_FULL: the command can not be buffered;
             you may try after a while to call the function again.
	   EE_INTERNAL_ERROR.


7. 设置同步回调函数
===================================================================================
ESPEAK_API espeak_ERROR espeak_Char(wchar_t character);

8. 设置同步回调函数
===================================================================================
ESPEAK_API espeak_ERROR espeak_SetParameter(espeak_PARAMETER parameter, int value, int relative);

9. 设置同步回调函数
===================================================================================
ESPEAK_API int espeak_GetParameter(espeak_PARAMETER parameter, int current);

10. 设置同步回调函数
===================================================================================
ESPEAK_API espeak_ERROR espeak_SetPunctuationList(const wchar_t *punctlist);

11. 设置同步回调函数
===================================================================================
ESPEAK_API void espeak_SetPhonemeTrace(int value, FILE *stream);

12. 设置同步回调函数
===================================================================================
ESPEAK_API const char *espeak_TextToPhonemes(const void **textptr, int textmode, int phonememode);

13. 设置同步回调函数
===================================================================================
ESPEAK_API void espeak_CompileDictionary(const char *path, FILE *log, int flags);

14. 设置同步回调函数
===================================================================================
ESPEAK_API const espeak_VOICE **espeak_ListVoices(espeak_VOICE *voice_spec);

15. 设置同步回调函数
===================================================================================
ESPEAK_API espeak_ERROR espeak_SetVoiceByName(const char *name);

16. 设置同步回调函数
===================================================================================
ESPEAK_API espeak_ERROR espeak_SetVoiceByProperties(espeak_VOICE *voice_spec);

17. 设置同步回调函数
===================================================================================
ESPEAK_API espeak_VOICE *espeak_GetCurrentVoice(void);

18. 设置同步回调函数
===================================================================================
ESPEAK_API espeak_ERROR espeak_Cancel(void);

19. 设置同步回调函数
===================================================================================
ESPEAK_API int espeak_IsPlaying(void);

20. 设置同步回调函数
===================================================================================
ESPEAK_API espeak_ERROR espeak_Synchronize(void);

21. 设置同步回调函数
===================================================================================
ESPEAK_API espeak_ERROR espeak_Terminate(void);

22. 设置同步回调函数
===================================================================================
ESPEAK_API const char *espeak_Info(const char **path_data);
